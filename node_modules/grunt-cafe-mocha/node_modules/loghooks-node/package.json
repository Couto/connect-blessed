{
  "name": "loghooks-node",
  "description": "Hook console log, process stdout for Node.js",
  "url": "http://github.com/dpweb/loghooks-node/",
  "keywords": [
    "util",
    "nodejs",
    "configuration",
    "config",
    "log",
    "hook"
  ],
  "author": {
    "name": "C Borkert",
    "email": "ILIKECHEESE@dpsw.info"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dpweb/loghooks-node.git"
  },
  "version": "0.0.1",
  "readme": "loghooks-node\n==================\n###Simple helper to hook stdout, console log to remote clients, file, or custom function\n\n#### Example\n\n```javascript\nvar hook = require('loghooks-node');\nhook.stdout(hook.tlsclient(8888, 'key.pem', 'cert.pem'), AlsoPrintToStdout=false);\n```\n\nSee the test-* files for examples\n\nThere are many logging modules out there, but you may have used console.log, or stdout in\nexisting code, right?\n\nYou would have to go back and rework that..  OR..  Just hook stdout with this module.\n\n#####Supported are:\n TCP client (connect to your app remotely for live log updates over telnet)  \n```javascript\nhook.stdout(hook.tcpclient(8888), AlsoPrintToStdout=false);\n```\n TLS client (like TCP but encrypted using tls/ssl)  \n```javascript\nhook.stdout(hook.tlsclient(8888, 'key.pem', 'cert.pem'), AlsoPrintToStdout=false);\n```\n File (just write to a file)  \n```javascript\nhook.stdout(hook.file('hookedlog.txt'), AlsoPrintToStdout=false);\n```\n Uncaught (hook uncaught exceptions)  \n```javascript\nhook.uncaught(function(s){\n  \tconsole.log('caught exception here.. ' + s);\n});\n```\n Custom functions (use your function to handle console.log)\n```javascript\nfunction myfunc(s){\n  // note stdout was hooked, not stderr..\n\tprocess.stderr.write('Custom func sez: '+s);\n}\n\nhook.stdout(myfunc, AlsoPrintToStdout=false);\n```\n",
  "readmeFilename": "README.md",
  "_id": "loghooks-node@0.0.1",
  "_from": "loghooks-node@0.0.1"
}
